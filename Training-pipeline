import matplotlib.pyplot as plt

# Create forecast index
forecast_index = pd.date_range(start=df_model.index[-1] + pd.DateOffset(months=1), periods=n_forecast, freq='MS')
forecast_mean.index = forecast_index
conf_int.index = forecast_index

# Plot
plt.figure(figsize=(12, 6))
plt.plot(df['rate_change'], label='Observed', color='blue')
plt.plot(forecast_mean, label='Forecast', color='orange')
plt.fill_between(forecast_index,
                 conf_int.iloc[:, 0],
                 conf_int.iloc[:, 1],
                 color='orange', alpha=0.3, label='Confidence Interval')

plt.title('Rate Change Forecast with 95% Confidence Interval')
plt.xlabel('Date')
plt.ylabel('Rate Change')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()import pandas as pd
import numpy as np
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.preprocessing import StandardScaler

# Assume df is your dataframe with 'rate_change' and exogenous variables
# Ensure the datetime index is set
df['date'] = pd.to_datetime(df['date'])  # Replace with your date column
df.set_index('date', inplace=True)
df = df.asfreq('MS')  # Monthly Start frequency

# Create lagged versions of rate_change
for lag in range(1, 13):  # Lag 1 to 12 months
    df[f'rate_change_lag_{lag}'] = df['rate_change'].shift(lag)

# Create lagged versions of exogenous variables
exog_vars = ['var1', 'var2']  # Replace with your actual exogenous variables
for var in exog_vars:
    for lag in range(1, 13):
        df[f'{var}_lag_{lag}'] = df[var].shift(lag)

# Drop rows with NaNs due to lagging
df_model = df.dropna()

# Define target and exogenous features
y = df_model['rate_change']
X = df_model.drop(columns=['rate_change'])

# Optional: scale exogenous variables
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train SARIMAX model (simple ARIMA terms here; tweak p,d,q/P,D,Q,s as needed)
model = SARIMAX(y, exog=X_scaled, order=(1, 0, 0), seasonal_order=(1, 0, 0, 12))
results = model.fit(disp=False)

# Forecast 12 months ahead
# Build future exogenous values (this must be based on your assumptions or a separate forecast)
future_exog = X.tail(12).copy()  # Placeholder: adjust with actual future exogenous values
future_exog_scaled = scaler.transform(future_exog)

forecast = results.forecast(steps=12, exog=future_exog_scaled)

# Output
forecast.index = pd.date_range(start=df_model.index[-1] + pd.DateOffset(months=1), periods=12, freq='MS')
print(forecast)import pandas as pd
import numpy as np
from xgboost import XGBRegressor
import matplotlib.pyplot as plt

def create_lagged_features(df, target_col='rate_change', max_lag=3):
    df_lagged = df.copy()
    exogenous_cols = df.drop(columns=[target_col]).columns

    # Create lagged features
    for col in exogenous_cols:
        for lag in range(1, max_lag + 1):
            df_lagged[f'{col}_lag{lag}'] = df_lagged[col].shift(lag)

    for lag in range(1, max_lag + 1):
        df_lagged[f'{target_col}_lag{lag}'] = df_lagged[target_col].shift(lag)

    df_lagged = df_lagged.dropna()
    return df_lagged

def train_initial_model(df_lagged, target_col='rate_change', train_end_date='2024-12-01'):
    df_lagged = df_lagged.sort_index()
    train = df_lagged.loc[:train_end_date]

    X_train = train.drop(columns=[target_col])
    y_train = train[target_col]

    model = XGBRegressor(n_estimators=200, learning_rate=0.05, max_depth=3)
    model.fit(X_train, y_train)

    return model, X_train.columns.tolist()

def recursive_forecast(model, df_lagged, feature_names, target_col='rate_change', forecast_start='2025-01-01', forecast_end='2025-12-01', max_lag=3):
    df_forecast = df_lagged.copy()
    forecast_dates = pd.date_range(start=forecast_start, end=forecast_end, freq='MS')
    preds = []

    for date in forecast_dates:
        input_row = {}
        for col in feature_names:
            lag_months = int(col.split('_lag')[-1]) if '_lag' in col else None
            base_col = col.split('_lag')[0] if '_lag' in col else col
            lag_date = date - pd.DateOffset(months=lag_months) if lag_months else None
            input_row[col] = df_forecast.at[lag_date, base_col] if lag_date in df_forecast.index else np.nan

        input_df = pd.DataFrame([input_row], index=[date])
        input_df = input_df[feature_names]

        if input_df.isnull().any().any():
            raise ValueError(f'Missing lagged data at {date}')

        pred = model.predict(input_df)[0]
        df_forecast.loc[date, target_col] = pred

        # Generate new lagged values dynamically
        for lag in range(1, max_lag + 1):
            future_date = date + pd.DateOffset(months=lag)
            if future_date not in df_forecast.index:
                df_forecast.loc[future_date] = np.nan
            df_forecast.loc[future_date, f'{target_col}_lag{lag}'] = pred if lag == 1 else df_forecast.loc[future_date - pd.DateOffset(months=1), f'{target_col}_lag{lag - 1}']

    return df_forecast.loc[forecast_start:forecast_end, target_col]

def plot_forecast(actual_series, predicted_series):
    plt.figure(figsize=(10, 5))
    actual_series.plot(label='Actual', marker='o')
    predicted_series.plot(label='Forecast', marker='x')
    plt.title('Rate Change Forecast (2025)')
    plt.ylabel('Rate Change')
    plt.legend()
    plt.grid()
    plt.show()

# --- USAGE ---

# 1. Preprocess your DataFrame
df_lagged = create_lagged_features(df, target_col='rate_change', max_lag=3)

# 2. Train the model
model, feature_names = train_initial_model(df_lagged, 'rate_change', train_end_date='2024-12-01')

# 3. Recursive Forecast 2025
forecast = recursive_forecast(model, df_lagged, feature_names, 'rate_change', '2025-01-01', '2025-12-01', max_lag=3)

# 4. Plot
plot_forecast(df['rate_change'], forecast)import pandas as pd
import numpy as np
from xgboost import XGBRegressor
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error

def create_lagged_features(df, target_col='rate_change', max_lag=3):
    df_lagged = df.copy()
    
    # Lag exogenous features
    exogenous_cols = df.drop(columns=[target_col]).columns
    for col in exogenous_cols:
        for lag in range(1, max_lag + 1):
            df_lagged[f'{col}_lag{lag}'] = df[col].shift(lag)

    # Lag the target (autoregressive terms)
    for lag in range(1, max_lag + 1):
        df_lagged[f'{target_col}_lag{lag}'] = df[target_col].shift(lag)

    df_lagged = df_lagged.dropna()
    return df_lagged

def train_initial_model(df, target_col='rate_change', max_lag=3, train_end_date='2024-12-01'):
    df_lagged = create_lagged_features(df, target_col, max_lag)
    df_lagged = df_lagged.sort_index()

    train = df_lagged.loc[:train_end_date]
    X_train = train.drop(columns=[target_col])
    y_train = train[target_col]

    model = XGBRegressor(n_estimators=200, learning_rate=0.05, max_depth=3)
    model.fit(X_train, y_train)

    return model, df_lagged

def recursive_forecast(model, df_full, target_col='rate_change', forecast_start='2025-01-01', forecast_end='2025-12-01', max_lag=3):
    forecast_dates = pd.date_range(start=forecast_start, end=forecast_end, freq='MS')
    df_forecast = df_full.copy()
    preds = []

    for date in forecast_dates:
        input_row = {}
        
        for col in df_forecast.columns:
            if col == target_col:
                continue
            # Add lags for exogenous
            for lag in range(1, max_lag + 1):
                lag_date = date - pd.DateOffset(months=lag)
                input_row[f'{col}_lag{lag}'] = df_forecast.loc[lag_date, col] if lag_date in df_forecast.index else np.nan
        
        for lag in range(1, max_lag + 1):
            lag_date = date - pd.DateOffset(months=lag)
            input_row[f'{target_col}_lag{lag}'] = df_forecast.loc[lag_date, target_col] if lag_date in df_forecast.index else np.nan

        input_df = pd.DataFrame([input_row], index=[date])
        if input_df.isnull().any().any():
            raise ValueError(f'Missing data in lagged inputs at {date}')

        pred = model.predict(input_df)[0]
        df_forecast.loc[date, target_col] = pred
        preds.append((date, pred))

    forecast_series = pd.Series(dict(preds))
    return forecast_series

def plot_forecast(actual_series, predicted_series):
    plt.figure(figsize=(10, 5))
    actual_series.plot(label='Actual', marker='o')
    predicted_series.plot(label='Forecast', marker='x')
    plt.title('Rate Change Forecast (2025)')
    plt.ylabel('Rate Change')
    plt.legend()
    plt.grid()
    plt.show()

# --- USAGE ---
# Assumptions:
# - df contains all features (monthly index), including 'rate_change' as the target
# - Exogenous features are already merged in
# - Last known data is Dec 2024

# Train the model on all data up to Dec 2024
model, df_lagged = train_initial_model(df, target_col='rate_change', max_lag=3, train_end_date='2024-12-01')

# Forecast all of 2025
forecast = recursive_forecast(model, df, target_col='rate_change', forecast_start='2025-01-01', forecast_end='2025-12-01', max_lag=3)

# Plot results
plot_forecast(df['rate_change'], forecast)
